version: '3.8'

services:
  # PostgreSQL - 관계형 데이터베이스 (사용자, 세션 데이터 등)
  postgres:
    image: postgres:14-alpine
    container_name: haptitalk-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${POSTGRES_VOLUME_NAME}:/var/lib/postgresql/data
      - ./infrastructure/database/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - 비정형 데이터베이스 (분석 결과, 대화 데이터 등)
  mongodb:
    image: mongo:5
    container_name: haptitalk-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    volumes:
      - ${MONGODB_VOLUME_NAME}:/data/db
      - ./infrastructure/database/mongodb/init:/docker-entrypoint-initdb.d
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - haptitalk_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - 캐싱 및 메시지 브로커
  redis:
    image: redis:7-alpine
    container_name: haptitalk-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      sh -c '
      redis-server --requirepass "${REDIS_PASSWORD}" --appendonly yes &
      sleep 5 &&
      /init/redis-init.sh &&
      wait
      '
    volumes:
      - ${REDIS_VOLUME_NAME}:/data
      - ./infrastructure/database/redis/init:/init
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper - Kafka 클러스터 관리
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: haptitalk-zookeeper
    restart: unless-stopped
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  # Kafka - 메시징 시스템
  kafka:
    image: bitnami/kafka:3.4
    container_name: haptitalk-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
      - KAFKA_HEAP_OPTS=-Xmx512m -Xms256m
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - kafka_data:/bitnami/kafka

  # Kafka UI - Kafka 관리 웹 인터페이스
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: haptitalk-kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT:-8080}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: haptitalk
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - haptitalk_network

  # Kafka 초기화 서비스
  kafka-init:
    image: bitnami/kafka:3.4
    container_name: haptitalk-kafka-init
    depends_on:
      - kafka
    volumes:
      - ./infrastructure/messaging/kafka/init:/scripts
    environment:
      KAFKA_TOPIC_SESSION_EVENTS: ${KAFKA_TOPIC_SESSION_EVENTS}
      KAFKA_TOPIC_ANALYSIS_RESULTS: ${KAFKA_TOPIC_ANALYSIS_RESULTS}
      KAFKA_TOPIC_FEEDBACK_COMMANDS: ${KAFKA_TOPIC_FEEDBACK_COMMANDS}
      KAFKA_TOPIC_USER_ACTIVITY: ${KAFKA_TOPIC_USER_ACTIVITY}
    command: ["bash", "-c", "chmod +x /scripts/kafka-init.sh && /scripts/kafka-init.sh"]
    networks:
      - haptitalk_network
    restart: on-failure

  # Kong 설정 초기화 서비스
  kong-init:
    image: alpine:latest
    container_name: haptitalk-kong-init
    environment:
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_APP_KEY_ID: ${JWT_APP_KEY_ID}
    volumes:
      - ./infrastructure/api-gateway/kong.yml:/tmp/kong.yml.template:ro
      - kong_config:/tmp/kong_config
    command: >
      sh -c '
        apk add --no-cache gettext &&
        echo "Kong 설정 파일 환경변수 치환 시작..." &&
        envsubst < /tmp/kong.yml.template > /tmp/kong_config/kong.yml &&
        echo "환경변수 치환 완료!" &&
        echo "생성된 JWT 소비자 설정:" &&
        grep -A 5 "jwt_secrets:" /tmp/kong_config/kong.yml
      '
    networks:
      - haptitalk_network

  # Kong API 게이트웨이 (환경변수 치환 적용)
  kong:
    image: kong:3.0
    container_name: haptitalk-kong
    restart: unless-stopped
    depends_on:
      - kong-init
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: bundled
    volumes:
      - kong_config:/usr/local/kong/declarative:ro
    ports:
      - "${KONG_PROXY_PORT}:8000"
      - "${KONG_HTTPS_PORT}:8443"
      - "${KONG_ADMIN_PORT}:8001"
      - "8444:8444"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 정적 웹 서버 (관리자 페이지)
  static-web:
    image: nginx:1.23-alpine
    container_name: haptitalk-static-web
    restart: unless-stopped
    volumes:
      - ./infrastructure/static-web/html:/usr/share/nginx/html:ro
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch - 로그 저장소
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: haptitalk-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana - 로그 시각화
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: haptitalk-kibana
    restart: unless-stopped
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=haptitalk-kibana
      - SERVER_HOST=0.0.0.0
      - LOGGING_ROOT_LEVEL=info
    depends_on:
      - elasticsearch
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash - 로그 처리 파이프라인
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: haptitalk-logstash
    restart: unless-stopped
    ports:
      - "${LOGSTASH_BEATS_PORT:-5044}:5044"
      - "${LOGSTASH_TCP_PORT:-5000}:5000"
      - "${LOGSTASH_API_PORT:-9600}:9600"
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
      - "xpack.monitoring.enabled=false"
    command: >
      bash -c '
      echo "
      input {
        beats {
          port => 5044
        }
        tcp {
          port => 5000
        }
      }
      output {
        elasticsearch {
          hosts => [\"elasticsearch:9200\"]
          index => \"haptitalk-logs-%{+YYYY.MM.dd}\"
        }
      }
      " > /usr/share/logstash/pipeline/logstash.conf &&
      /usr/local/bin/docker-entrypoint
      '
    volumes:
      - logstash_data:/usr/share/logstash/data
    depends_on:
      - elasticsearch
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Filebeat - 로그 수집
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: haptitalk-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/monitoring/elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    command: ["filebeat", "-e", "-strict.perms=false", "-c", "/usr/share/filebeat/filebeat.yml"]
    depends_on:
      - logstash
    networks:
      - haptitalk_network

  # Jaeger - 분산 추적
  jaeger:
    image: jaegertracing/all-in-one:1.45
    container_name: haptitalk-jaeger
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
      - "${JAEGER_COLLECTOR_GRPC_PORT:-14250}:14250"
      - "${JAEGER_AGENT_PORT:-6831}:6831/udp"
      - "${JAEGER_OTLP_GRPC_PORT:-4317}:4317"
      - "${JAEGER_OTLP_HTTP_PORT:-4318}:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.80.0
    container_name: haptitalk-otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./infrastructure/monitoring/otel/otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    ports:
      - "${OTEL_COLLECTOR_PORT:-4318}:4318"
      - "${OTEL_COLLECTOR_HTTP_PORT:-4319}:4319"
      - "${OTEL_COLLECTOR_PROM_PORT:-8889}:8889"
      - "${OTEL_COLLECTOR_ZPAGES_PORT:-55679}:55679"
    depends_on:
      - jaeger
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:55679/debug/servicez"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus - 메트릭 수집
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: haptitalk-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana - 모니터링 대시보드
  grafana:
    image: grafana/grafana:10.0.0
    container_name: haptitalk-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3333}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Node Exporter - 시스템 메트릭
  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: haptitalk-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9100/metrics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Exporter
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: haptitalk-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_URI=postgres:5432/${POSTGRES_DB}?sslmode=disable
      - DATA_SOURCE_USER=${POSTGRES_USER}
      - DATA_SOURCE_PASS=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    networks:
      - haptitalk_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9187/metrics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: haptitalk-redis-exporter
    restart: unless-stopped
    command:
      - '--redis.addr=redis:6379'
      - '--redis.password=${REDIS_PASSWORD}'
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    networks:
      - haptitalk_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Exporter
  mongodb-exporter:
    image: bitnami/mongodb-exporter:0.40.0
    container_name: haptitalk-mongodb-exporter
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/admin?authSource=admin
      - MONGODB_USER=${MONGO_USER}
      - MONGODB_PASSWORD=${MONGO_PASSWORD}
    command:
      - 'mongodb_exporter'
      - '--mongodb.uri=${MONGODB_URI}'
      - '--mongodb.user=${MONGODB_USER}'
      - '--mongodb.password=${MONGO_PASSWORD}'
      - '--collect-all'
    ports:
      - "${MONGODB_EXPORTER_PORT:-9216}:9216"
    networks:
      - haptitalk_network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9216/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 인증 서비스
  auth-service:
    build:
      context: ./api/auth-service
      dockerfile: Dockerfile
    container_name: haptitalk-auth-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=${AUTH_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - JWT_ACCESS_EXPIRES_IN=${JWT_ACCESS_EXPIRES_IN}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}
      - JWT_SESSION_EXPIRES_IN=${JWT_SESSION_EXPIRES_IN}
      - JWT_APP_KEY_ID=${JWT_APP_KEY_ID}
      - INTER_SERVICE_TOKEN=${INTER_SERVICE_TOKEN}
      - EMAIL_FROM=${EMAIL_FROM}
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_USER_ACTIVITY=${KAFKA_TOPIC_USER_ACTIVITY}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=auth-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    volumes:
      - ./api/auth-service:/app
      - ./api/shared:/app/api/shared
      - /app/node_modules
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${AUTH_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 실시간 서비스
  realtime-service:
    build:
      context: .
      dockerfile: ./api/realtime-service/Dockerfile
    container_name: haptitalk-realtime-service
    restart: unless-stopped
    volumes:
      - ./api/realtime-service:/app
      - ./api/shared:/app/api/shared
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=${REALTIME_SERVICE_PORT}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - SESSION_SERVICE_URL=http://session-service:${SESSION_SERVICE_PORT}
      - FEEDBACK_SERVICE_URL=http://feedback-service:${FEEDBACK_SERVICE_PORT}
      - INTER_SERVICE_TOKEN=${INTER_SERVICE_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_SESSION_EVENTS=${KAFKA_TOPIC_SESSION_EVENTS}
      - KAFKA_TOPIC_ANALYSIS_RESULTS=${KAFKA_TOPIC_ANALYSIS_RESULTS}
      - KAFKA_TOPIC_FEEDBACK_COMMANDS=${KAFKA_TOPIC_FEEDBACK_COMMANDS}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=realtime-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    ports:
      - "${REALTIME_SERVICE_PORT}:${REALTIME_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${REALTIME_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 세션 서비스
  session-service:
    build:
      context: .
      dockerfile: ./api/session-service/Dockerfile
    container_name: haptitalk-session-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=${SESSION_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
      - INTER_SERVICE_TOKEN=${INTER_SERVICE_TOKEN}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_SESSION_EVENTS=${KAFKA_TOPIC_SESSION_EVENTS}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=session-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    volumes:
      - ./api/session-service:/app
      - ./api/shared:/app/api/shared
      - /app/node_modules
    ports:
      - "${SESSION_SERVICE_PORT}:${SESSION_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${SESSION_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 피드백 서비스
  feedback-service:
    build:
      context: ./api/feedback-service
      dockerfile: Dockerfile
    container_name: haptitalk-feedback-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=${FEEDBACK_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
      - INTER_SERVICE_TOKEN=${INTER_SERVICE_TOKEN}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_FEEDBACK_COMMANDS=${KAFKA_TOPIC_FEEDBACK_COMMANDS}
      - KAFKA_TOPIC_ANALYSIS_RESULTS=${KAFKA_TOPIC_ANALYSIS_RESULTS}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=feedback-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    volumes:
      - ./api/feedback-service:/app
      - ./api/shared:/app/api/shared
      - /app/node_modules
    ports:
      - "${FEEDBACK_SERVICE_PORT}:${FEEDBACK_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - mongodb
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${FEEDBACK_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 사용자 서비스
  user-service:
    build:
      context: .
      dockerfile: api/user-service/Dockerfile
    container_name: haptitalk-user-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=${USER_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - INTER_SERVICE_TOKEN=${INTER_SERVICE_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_USER_ACTIVITY=${KAFKA_TOPIC_USER_ACTIVITY}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=user-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    volumes:
      - ./api/user-service:/app
      - ./api/shared:/app/api/shared
      - /app/node_modules
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:${USER_SERVICE_PORT}/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # 리포트 서비스
  report-service:
    build:
      context: ./api/report-service
      dockerfile: Dockerfile
    container_name: haptitalk-report-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=${REPORT_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - INTER_SERVICE_TOKEN=${INTER_SERVICE_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_SESSION_EVENTS=${KAFKA_TOPIC_SESSION_EVENTS}
      - KAFKA_TOPIC_ANALYSIS_RESULTS=${KAFKA_TOPIC_ANALYSIS_RESULTS}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=report-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    volumes:
      - ./api/report-service:/app
      - ./api/shared:/app/api/shared
      - /app/node_modules
    ports:
      - "${REPORT_SERVICE_PORT}:${REPORT_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - mongodb
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${REPORT_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  haptitalk_network:
    driver: bridge
    name: haptitalk_network

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME_NAME}
  mongodb_data:
    name: ${MONGODB_VOLUME_NAME}
  redis_data:
    name: ${REDIS_VOLUME_NAME}
  kong_data:
    name: ${KONG_VOLUME_NAME}
  zookeeper_data:
    name: ${ZOOKEEPER_VOLUME_NAME:-zookeeper_data}
  zookeeper_log:
    name: ${ZOOKEEPER_LOG_VOLUME_NAME:-zookeeper_log}
  kafka_data:
    name: ${KAFKA_VOLUME_NAME:-kafka_data}
  kong_config:
    name: kong_config
  elasticsearch_data:
    name: elasticsearch_data
  logstash_data:
    name: logstash_data
  prometheus_data:
    name: prometheus_data
  grafana_data:
    name: grafana_data
  jaeger_data:
    name: jaeger_data
    